// Code generated from SFGrammar.g4 by ANTLR 4.13.0. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type SFGrammarLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var SFGrammarLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func sfgrammarlexerLexerInit() {
	staticData := &SFGrammarLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'Int'", "'Float'", "'String'", "'Bool'", "'Character'", "'if'",
		"'else'", "'switch'", "'case'", "'default'", "'break'", "'continue'",
		"'return'", "'while'", "'for'", "'func'", "'->'", "'in'", "'.'", "'guard'",
		"'print'", "'true'", "'false'", "'nil'", "'var'", "'let'", "'&'", "'_'",
		"", "", "", "'!'", "'('", "')'", "'{'", "'}'", "':'", "','", "';'",
		"'='", "'+='", "'-='", "'?'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='",
		"'!='", "'>'", "'>='", "'<'", "'<='", "'&&'", "'||'",
	}
	staticData.SymbolicNames = []string{
		"", "INT", "FLOAT", "STRING", "BOOL", "CHAR", "IF", "ELSE", "SWITCH",
		"CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN", "WHILE", "FOR", "FUNC",
		"ARROW_FUNCTION", "IN", "DOT", "GUARD", "PRINT", "TRU", "FAL", "NIL",
		"DECLARATION_VAR", "DECLARATION_LET", "REFERENCE", "NOT_PARAM", "DIGIT_PRIMITIVE",
		"STRING_PRIMITIVE", "ID_PRIMITIVE", "NEGATION_OPERATOR", "LPAREN", "RPAREN",
		"LBRACE", "RBRACE", "COLON", "COMMA", "SEMICOLON", "IS_", "PLUS_IS",
		"MINUS_IS", "QUESTION_MARK", "PLUS", "MINUS", "MULTIPLY", "DIVIDE",
		"MODULO", "EQUALS", "NOT_EQUALS", "GREATER", "GREATER_EQUALS", "LESS",
		"LESS_EQUALS", "AND", "OR", "WHITESPACE", "MULTI_COMMENT", "LINE_COMMENT",
	}
	staticData.RuleNames = []string{
		"INT", "FLOAT", "STRING", "BOOL", "CHAR", "IF", "ELSE", "SWITCH", "CASE",
		"DEFAULT", "BREAK", "CONTINUE", "RETURN", "WHILE", "FOR", "FUNC", "ARROW_FUNCTION",
		"IN", "DOT", "GUARD", "PRINT", "TRU", "FAL", "NIL", "DECLARATION_VAR",
		"DECLARATION_LET", "REFERENCE", "NOT_PARAM", "DIGIT_PRIMITIVE", "STRING_PRIMITIVE",
		"ID_PRIMITIVE", "NEGATION_OPERATOR", "LPAREN", "RPAREN", "LBRACE", "RBRACE",
		"COLON", "COMMA", "SEMICOLON", "IS_", "PLUS_IS", "MINUS_IS", "QUESTION_MARK",
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "EQUALS", "NOT_EQUALS",
		"GREATER", "GREATER_EQUALS", "LESS", "LESS_EQUALS", "AND", "OR", "WHITESPACE",
		"MULTI_COMMENT", "LINE_COMMENT", "ESC_SEQ",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 59, 387, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3,
		1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9,
		1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10,
		1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22,
		1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1,
		25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28, 4, 28, 267, 8, 28, 11, 28,
		12, 28, 268, 1, 28, 1, 28, 4, 28, 273, 8, 28, 11, 28, 12, 28, 274, 3, 28,
		277, 8, 28, 1, 29, 1, 29, 5, 29, 281, 8, 29, 10, 29, 12, 29, 284, 9, 29,
		1, 29, 1, 29, 1, 30, 1, 30, 5, 30, 290, 8, 30, 10, 30, 12, 30, 293, 9,
		30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35,
		1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1,
		40, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 44, 1, 44, 1, 45,
		1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1,
		49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53,
		1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 56, 4, 56, 354, 8, 56, 11,
		56, 12, 56, 355, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 5, 57, 364,
		8, 57, 10, 57, 12, 57, 367, 9, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1,
		58, 1, 58, 1, 58, 1, 58, 5, 58, 378, 8, 58, 10, 58, 12, 58, 381, 9, 58,
		1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 365, 0, 60, 1, 1, 3, 2, 5, 3, 7,
		4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27,
		14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45,
		23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63,
		32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81,
		41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99,
		50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113, 57, 115,
		58, 117, 59, 119, 0, 1, 0, 7, 1, 0, 48, 57, 1, 0, 34, 34, 3, 0, 65, 90,
		95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 4, 0, 9, 10, 13,
		13, 32, 32, 92, 92, 2, 0, 10, 10, 13, 13, 7, 0, 32, 33, 35, 35, 43, 43,
		45, 46, 58, 58, 64, 64, 91, 93, 393, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0,
		0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0,
		0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0,
		0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0,
		0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1,
		0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43,
		1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0,
		51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0,
		0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0,
		0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0,
		0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1,
		0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89,
		1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0,
		97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0,
		0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111,
		1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0,
		1, 121, 1, 0, 0, 0, 3, 125, 1, 0, 0, 0, 5, 131, 1, 0, 0, 0, 7, 138, 1,
		0, 0, 0, 9, 143, 1, 0, 0, 0, 11, 153, 1, 0, 0, 0, 13, 156, 1, 0, 0, 0,
		15, 161, 1, 0, 0, 0, 17, 168, 1, 0, 0, 0, 19, 173, 1, 0, 0, 0, 21, 181,
		1, 0, 0, 0, 23, 187, 1, 0, 0, 0, 25, 196, 1, 0, 0, 0, 27, 203, 1, 0, 0,
		0, 29, 209, 1, 0, 0, 0, 31, 213, 1, 0, 0, 0, 33, 218, 1, 0, 0, 0, 35, 221,
		1, 0, 0, 0, 37, 224, 1, 0, 0, 0, 39, 226, 1, 0, 0, 0, 41, 232, 1, 0, 0,
		0, 43, 238, 1, 0, 0, 0, 45, 243, 1, 0, 0, 0, 47, 249, 1, 0, 0, 0, 49, 253,
		1, 0, 0, 0, 51, 257, 1, 0, 0, 0, 53, 261, 1, 0, 0, 0, 55, 263, 1, 0, 0,
		0, 57, 266, 1, 0, 0, 0, 59, 278, 1, 0, 0, 0, 61, 287, 1, 0, 0, 0, 63, 294,
		1, 0, 0, 0, 65, 296, 1, 0, 0, 0, 67, 298, 1, 0, 0, 0, 69, 300, 1, 0, 0,
		0, 71, 302, 1, 0, 0, 0, 73, 304, 1, 0, 0, 0, 75, 306, 1, 0, 0, 0, 77, 308,
		1, 0, 0, 0, 79, 310, 1, 0, 0, 0, 81, 312, 1, 0, 0, 0, 83, 315, 1, 0, 0,
		0, 85, 318, 1, 0, 0, 0, 87, 320, 1, 0, 0, 0, 89, 322, 1, 0, 0, 0, 91, 324,
		1, 0, 0, 0, 93, 326, 1, 0, 0, 0, 95, 328, 1, 0, 0, 0, 97, 330, 1, 0, 0,
		0, 99, 333, 1, 0, 0, 0, 101, 336, 1, 0, 0, 0, 103, 338, 1, 0, 0, 0, 105,
		341, 1, 0, 0, 0, 107, 343, 1, 0, 0, 0, 109, 346, 1, 0, 0, 0, 111, 349,
		1, 0, 0, 0, 113, 353, 1, 0, 0, 0, 115, 359, 1, 0, 0, 0, 117, 373, 1, 0,
		0, 0, 119, 384, 1, 0, 0, 0, 121, 122, 5, 73, 0, 0, 122, 123, 5, 110, 0,
		0, 123, 124, 5, 116, 0, 0, 124, 2, 1, 0, 0, 0, 125, 126, 5, 70, 0, 0, 126,
		127, 5, 108, 0, 0, 127, 128, 5, 111, 0, 0, 128, 129, 5, 97, 0, 0, 129,
		130, 5, 116, 0, 0, 130, 4, 1, 0, 0, 0, 131, 132, 5, 83, 0, 0, 132, 133,
		5, 116, 0, 0, 133, 134, 5, 114, 0, 0, 134, 135, 5, 105, 0, 0, 135, 136,
		5, 110, 0, 0, 136, 137, 5, 103, 0, 0, 137, 6, 1, 0, 0, 0, 138, 139, 5,
		66, 0, 0, 139, 140, 5, 111, 0, 0, 140, 141, 5, 111, 0, 0, 141, 142, 5,
		108, 0, 0, 142, 8, 1, 0, 0, 0, 143, 144, 5, 67, 0, 0, 144, 145, 5, 104,
		0, 0, 145, 146, 5, 97, 0, 0, 146, 147, 5, 114, 0, 0, 147, 148, 5, 97, 0,
		0, 148, 149, 5, 99, 0, 0, 149, 150, 5, 116, 0, 0, 150, 151, 5, 101, 0,
		0, 151, 152, 5, 114, 0, 0, 152, 10, 1, 0, 0, 0, 153, 154, 5, 105, 0, 0,
		154, 155, 5, 102, 0, 0, 155, 12, 1, 0, 0, 0, 156, 157, 5, 101, 0, 0, 157,
		158, 5, 108, 0, 0, 158, 159, 5, 115, 0, 0, 159, 160, 5, 101, 0, 0, 160,
		14, 1, 0, 0, 0, 161, 162, 5, 115, 0, 0, 162, 163, 5, 119, 0, 0, 163, 164,
		5, 105, 0, 0, 164, 165, 5, 116, 0, 0, 165, 166, 5, 99, 0, 0, 166, 167,
		5, 104, 0, 0, 167, 16, 1, 0, 0, 0, 168, 169, 5, 99, 0, 0, 169, 170, 5,
		97, 0, 0, 170, 171, 5, 115, 0, 0, 171, 172, 5, 101, 0, 0, 172, 18, 1, 0,
		0, 0, 173, 174, 5, 100, 0, 0, 174, 175, 5, 101, 0, 0, 175, 176, 5, 102,
		0, 0, 176, 177, 5, 97, 0, 0, 177, 178, 5, 117, 0, 0, 178, 179, 5, 108,
		0, 0, 179, 180, 5, 116, 0, 0, 180, 20, 1, 0, 0, 0, 181, 182, 5, 98, 0,
		0, 182, 183, 5, 114, 0, 0, 183, 184, 5, 101, 0, 0, 184, 185, 5, 97, 0,
		0, 185, 186, 5, 107, 0, 0, 186, 22, 1, 0, 0, 0, 187, 188, 5, 99, 0, 0,
		188, 189, 5, 111, 0, 0, 189, 190, 5, 110, 0, 0, 190, 191, 5, 116, 0, 0,
		191, 192, 5, 105, 0, 0, 192, 193, 5, 110, 0, 0, 193, 194, 5, 117, 0, 0,
		194, 195, 5, 101, 0, 0, 195, 24, 1, 0, 0, 0, 196, 197, 5, 114, 0, 0, 197,
		198, 5, 101, 0, 0, 198, 199, 5, 116, 0, 0, 199, 200, 5, 117, 0, 0, 200,
		201, 5, 114, 0, 0, 201, 202, 5, 110, 0, 0, 202, 26, 1, 0, 0, 0, 203, 204,
		5, 119, 0, 0, 204, 205, 5, 104, 0, 0, 205, 206, 5, 105, 0, 0, 206, 207,
		5, 108, 0, 0, 207, 208, 5, 101, 0, 0, 208, 28, 1, 0, 0, 0, 209, 210, 5,
		102, 0, 0, 210, 211, 5, 111, 0, 0, 211, 212, 5, 114, 0, 0, 212, 30, 1,
		0, 0, 0, 213, 214, 5, 102, 0, 0, 214, 215, 5, 117, 0, 0, 215, 216, 5, 110,
		0, 0, 216, 217, 5, 99, 0, 0, 217, 32, 1, 0, 0, 0, 218, 219, 5, 45, 0, 0,
		219, 220, 5, 62, 0, 0, 220, 34, 1, 0, 0, 0, 221, 222, 5, 105, 0, 0, 222,
		223, 5, 110, 0, 0, 223, 36, 1, 0, 0, 0, 224, 225, 5, 46, 0, 0, 225, 38,
		1, 0, 0, 0, 226, 227, 5, 103, 0, 0, 227, 228, 5, 117, 0, 0, 228, 229, 5,
		97, 0, 0, 229, 230, 5, 114, 0, 0, 230, 231, 5, 100, 0, 0, 231, 40, 1, 0,
		0, 0, 232, 233, 5, 112, 0, 0, 233, 234, 5, 114, 0, 0, 234, 235, 5, 105,
		0, 0, 235, 236, 5, 110, 0, 0, 236, 237, 5, 116, 0, 0, 237, 42, 1, 0, 0,
		0, 238, 239, 5, 116, 0, 0, 239, 240, 5, 114, 0, 0, 240, 241, 5, 117, 0,
		0, 241, 242, 5, 101, 0, 0, 242, 44, 1, 0, 0, 0, 243, 244, 5, 102, 0, 0,
		244, 245, 5, 97, 0, 0, 245, 246, 5, 108, 0, 0, 246, 247, 5, 115, 0, 0,
		247, 248, 5, 101, 0, 0, 248, 46, 1, 0, 0, 0, 249, 250, 5, 110, 0, 0, 250,
		251, 5, 105, 0, 0, 251, 252, 5, 108, 0, 0, 252, 48, 1, 0, 0, 0, 253, 254,
		5, 118, 0, 0, 254, 255, 5, 97, 0, 0, 255, 256, 5, 114, 0, 0, 256, 50, 1,
		0, 0, 0, 257, 258, 5, 108, 0, 0, 258, 259, 5, 101, 0, 0, 259, 260, 5, 116,
		0, 0, 260, 52, 1, 0, 0, 0, 261, 262, 5, 38, 0, 0, 262, 54, 1, 0, 0, 0,
		263, 264, 5, 95, 0, 0, 264, 56, 1, 0, 0, 0, 265, 267, 7, 0, 0, 0, 266,
		265, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 266, 1, 0, 0, 0, 268, 269,
		1, 0, 0, 0, 269, 276, 1, 0, 0, 0, 270, 272, 5, 46, 0, 0, 271, 273, 7, 0,
		0, 0, 272, 271, 1, 0, 0, 0, 273, 274, 1, 0, 0, 0, 274, 272, 1, 0, 0, 0,
		274, 275, 1, 0, 0, 0, 275, 277, 1, 0, 0, 0, 276, 270, 1, 0, 0, 0, 276,
		277, 1, 0, 0, 0, 277, 58, 1, 0, 0, 0, 278, 282, 5, 34, 0, 0, 279, 281,
		8, 1, 0, 0, 280, 279, 1, 0, 0, 0, 281, 284, 1, 0, 0, 0, 282, 280, 1, 0,
		0, 0, 282, 283, 1, 0, 0, 0, 283, 285, 1, 0, 0, 0, 284, 282, 1, 0, 0, 0,
		285, 286, 5, 34, 0, 0, 286, 60, 1, 0, 0, 0, 287, 291, 7, 2, 0, 0, 288,
		290, 7, 3, 0, 0, 289, 288, 1, 0, 0, 0, 290, 293, 1, 0, 0, 0, 291, 289,
		1, 0, 0, 0, 291, 292, 1, 0, 0, 0, 292, 62, 1, 0, 0, 0, 293, 291, 1, 0,
		0, 0, 294, 295, 5, 33, 0, 0, 295, 64, 1, 0, 0, 0, 296, 297, 5, 40, 0, 0,
		297, 66, 1, 0, 0, 0, 298, 299, 5, 41, 0, 0, 299, 68, 1, 0, 0, 0, 300, 301,
		5, 123, 0, 0, 301, 70, 1, 0, 0, 0, 302, 303, 5, 125, 0, 0, 303, 72, 1,
		0, 0, 0, 304, 305, 5, 58, 0, 0, 305, 74, 1, 0, 0, 0, 306, 307, 5, 44, 0,
		0, 307, 76, 1, 0, 0, 0, 308, 309, 5, 59, 0, 0, 309, 78, 1, 0, 0, 0, 310,
		311, 5, 61, 0, 0, 311, 80, 1, 0, 0, 0, 312, 313, 5, 43, 0, 0, 313, 314,
		5, 61, 0, 0, 314, 82, 1, 0, 0, 0, 315, 316, 5, 45, 0, 0, 316, 317, 5, 61,
		0, 0, 317, 84, 1, 0, 0, 0, 318, 319, 5, 63, 0, 0, 319, 86, 1, 0, 0, 0,
		320, 321, 5, 43, 0, 0, 321, 88, 1, 0, 0, 0, 322, 323, 5, 45, 0, 0, 323,
		90, 1, 0, 0, 0, 324, 325, 5, 42, 0, 0, 325, 92, 1, 0, 0, 0, 326, 327, 5,
		47, 0, 0, 327, 94, 1, 0, 0, 0, 328, 329, 5, 37, 0, 0, 329, 96, 1, 0, 0,
		0, 330, 331, 5, 61, 0, 0, 331, 332, 5, 61, 0, 0, 332, 98, 1, 0, 0, 0, 333,
		334, 5, 33, 0, 0, 334, 335, 5, 61, 0, 0, 335, 100, 1, 0, 0, 0, 336, 337,
		5, 62, 0, 0, 337, 102, 1, 0, 0, 0, 338, 339, 5, 62, 0, 0, 339, 340, 5,
		61, 0, 0, 340, 104, 1, 0, 0, 0, 341, 342, 5, 60, 0, 0, 342, 106, 1, 0,
		0, 0, 343, 344, 5, 60, 0, 0, 344, 345, 5, 61, 0, 0, 345, 108, 1, 0, 0,
		0, 346, 347, 5, 38, 0, 0, 347, 348, 5, 38, 0, 0, 348, 110, 1, 0, 0, 0,
		349, 350, 5, 124, 0, 0, 350, 351, 5, 124, 0, 0, 351, 112, 1, 0, 0, 0, 352,
		354, 7, 4, 0, 0, 353, 352, 1, 0, 0, 0, 354, 355, 1, 0, 0, 0, 355, 353,
		1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 357, 1, 0, 0, 0, 357, 358, 6, 56,
		0, 0, 358, 114, 1, 0, 0, 0, 359, 360, 5, 47, 0, 0, 360, 361, 5, 42, 0,
		0, 361, 365, 1, 0, 0, 0, 362, 364, 9, 0, 0, 0, 363, 362, 1, 0, 0, 0, 364,
		367, 1, 0, 0, 0, 365, 366, 1, 0, 0, 0, 365, 363, 1, 0, 0, 0, 366, 368,
		1, 0, 0, 0, 367, 365, 1, 0, 0, 0, 368, 369, 5, 42, 0, 0, 369, 370, 5, 47,
		0, 0, 370, 371, 1, 0, 0, 0, 371, 372, 6, 57, 0, 0, 372, 116, 1, 0, 0, 0,
		373, 374, 5, 47, 0, 0, 374, 375, 5, 47, 0, 0, 375, 379, 1, 0, 0, 0, 376,
		378, 8, 5, 0, 0, 377, 376, 1, 0, 0, 0, 378, 381, 1, 0, 0, 0, 379, 377,
		1, 0, 0, 0, 379, 380, 1, 0, 0, 0, 380, 382, 1, 0, 0, 0, 381, 379, 1, 0,
		0, 0, 382, 383, 6, 58, 0, 0, 383, 118, 1, 0, 0, 0, 384, 385, 5, 92, 0,
		0, 385, 386, 7, 6, 0, 0, 386, 120, 1, 0, 0, 0, 9, 0, 268, 274, 276, 282,
		291, 355, 365, 379, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// SFGrammarLexerInit initializes any static state used to implement SFGrammarLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewSFGrammarLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func SFGrammarLexerInit() {
	staticData := &SFGrammarLexerLexerStaticData
	staticData.once.Do(sfgrammarlexerLexerInit)
}

// NewSFGrammarLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewSFGrammarLexer(input antlr.CharStream) *SFGrammarLexer {
	SFGrammarLexerInit()
	l := new(SFGrammarLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &SFGrammarLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "SFGrammar.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// SFGrammarLexer tokens.
const (
	SFGrammarLexerINT               = 1
	SFGrammarLexerFLOAT             = 2
	SFGrammarLexerSTRING            = 3
	SFGrammarLexerBOOL              = 4
	SFGrammarLexerCHAR              = 5
	SFGrammarLexerIF                = 6
	SFGrammarLexerELSE              = 7
	SFGrammarLexerSWITCH            = 8
	SFGrammarLexerCASE              = 9
	SFGrammarLexerDEFAULT           = 10
	SFGrammarLexerBREAK             = 11
	SFGrammarLexerCONTINUE          = 12
	SFGrammarLexerRETURN            = 13
	SFGrammarLexerWHILE             = 14
	SFGrammarLexerFOR               = 15
	SFGrammarLexerFUNC              = 16
	SFGrammarLexerARROW_FUNCTION    = 17
	SFGrammarLexerIN                = 18
	SFGrammarLexerDOT               = 19
	SFGrammarLexerGUARD             = 20
	SFGrammarLexerPRINT             = 21
	SFGrammarLexerTRU               = 22
	SFGrammarLexerFAL               = 23
	SFGrammarLexerNIL               = 24
	SFGrammarLexerDECLARATION_VAR   = 25
	SFGrammarLexerDECLARATION_LET   = 26
	SFGrammarLexerREFERENCE         = 27
	SFGrammarLexerNOT_PARAM         = 28
	SFGrammarLexerDIGIT_PRIMITIVE   = 29
	SFGrammarLexerSTRING_PRIMITIVE  = 30
	SFGrammarLexerID_PRIMITIVE      = 31
	SFGrammarLexerNEGATION_OPERATOR = 32
	SFGrammarLexerLPAREN            = 33
	SFGrammarLexerRPAREN            = 34
	SFGrammarLexerLBRACE            = 35
	SFGrammarLexerRBRACE            = 36
	SFGrammarLexerCOLON             = 37
	SFGrammarLexerCOMMA             = 38
	SFGrammarLexerSEMICOLON         = 39
	SFGrammarLexerIS_               = 40
	SFGrammarLexerPLUS_IS           = 41
	SFGrammarLexerMINUS_IS          = 42
	SFGrammarLexerQUESTION_MARK     = 43
	SFGrammarLexerPLUS              = 44
	SFGrammarLexerMINUS             = 45
	SFGrammarLexerMULTIPLY          = 46
	SFGrammarLexerDIVIDE            = 47
	SFGrammarLexerMODULO            = 48
	SFGrammarLexerEQUALS            = 49
	SFGrammarLexerNOT_EQUALS        = 50
	SFGrammarLexerGREATER           = 51
	SFGrammarLexerGREATER_EQUALS    = 52
	SFGrammarLexerLESS              = 53
	SFGrammarLexerLESS_EQUALS       = 54
	SFGrammarLexerAND               = 55
	SFGrammarLexerOR                = 56
	SFGrammarLexerWHITESPACE        = 57
	SFGrammarLexerMULTI_COMMENT     = 58
	SFGrammarLexerLINE_COMMENT      = 59
)
